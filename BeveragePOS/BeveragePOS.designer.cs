#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace BeveragePOS
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BeveragePOS")]
	public partial class BeveragePOSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 擴充性方法定義
    partial void OnCreated();
    partial void InsertBeverage(Beverage instance);
    partial void UpdateBeverage(Beverage instance);
    partial void DeleteBeverage(Beverage instance);
    partial void InsertSystemLog(SystemLog instance);
    partial void UpdateSystemLog(SystemLog instance);
    partial void DeleteSystemLog(SystemLog instance);
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertOrderMaster(OrderMaster instance);
    partial void UpdateOrderMaster(OrderMaster instance);
    partial void DeleteOrderMaster(OrderMaster instance);
    #endregion
		
		public BeveragePOSDataContext() : 
				base(global::BeveragePOS.Properties.Settings.Default.BeveragePOSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BeveragePOSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BeveragePOSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BeveragePOSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BeveragePOSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Beverage> Beverage
		{
			get
			{
				return this.GetTable<Beverage>();
			}
		}
		
		public System.Data.Linq.Table<SystemLog> SystemLog
		{
			get
			{
				return this.GetTable<SystemLog>();
			}
		}
		
		public System.Data.Linq.Table<Employee> Employee
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetail
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<OrderMaster> OrderMaster
		{
			get
			{
				return this.GetTable<OrderMaster>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Beverage")]
	public partial class Beverage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Category;
		
		private int _Price;
		
		private bool _IsSale;
		
		private bool _IsChoosableSugar;
		
		private bool _IsChoosableIce;
		
		private EntitySet<OrderDetail> _OrderDetail;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnIsSaleChanging(bool value);
    partial void OnIsSaleChanged();
    partial void OnIsChoosableSugarChanging(bool value);
    partial void OnIsChoosableSugarChanged();
    partial void OnIsChoosableIceChanging(bool value);
    partial void OnIsChoosableIceChanged();
    #endregion
		
		public Beverage()
		{
			this._OrderDetail = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetail), new Action<OrderDetail>(this.detach_OrderDetail));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSale", DbType="Bit NOT NULL")]
		public bool IsSale
		{
			get
			{
				return this._IsSale;
			}
			set
			{
				if ((this._IsSale != value))
				{
					this.OnIsSaleChanging(value);
					this.SendPropertyChanging();
					this._IsSale = value;
					this.SendPropertyChanged("IsSale");
					this.OnIsSaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChoosableSugar", DbType="Bit NOT NULL")]
		public bool IsChoosableSugar
		{
			get
			{
				return this._IsChoosableSugar;
			}
			set
			{
				if ((this._IsChoosableSugar != value))
				{
					this.OnIsChoosableSugarChanging(value);
					this.SendPropertyChanging();
					this._IsChoosableSugar = value;
					this.SendPropertyChanged("IsChoosableSugar");
					this.OnIsChoosableSugarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsChoosableIce", DbType="Bit NOT NULL")]
		public bool IsChoosableIce
		{
			get
			{
				return this._IsChoosableIce;
			}
			set
			{
				if ((this._IsChoosableIce != value))
				{
					this.OnIsChoosableIceChanging(value);
					this.SendPropertyChanging();
					this._IsChoosableIce = value;
					this.SendPropertyChanged("IsChoosableIce");
					this.OnIsChoosableIceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beverage_OrderDetail", Storage="_OrderDetail", ThisKey="Name", OtherKey="BeverageName")]
		public EntitySet<OrderDetail> OrderDetail
		{
			get
			{
				return this._OrderDetail;
			}
			set
			{
				this._OrderDetail.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Beverage = this;
		}
		
		private void detach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Beverage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemLog")]
	public partial class SystemLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _EmployeeID;
		
		private System.DateTime _DateTime;
		
		private string _Description;
		
		private EntityRef<Employee> _Employee;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmployeeIDChanging(string value);
    partial void OnEmployeeIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public SystemLog()
		{
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SystemLog", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.SystemLog.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.SystemLog.Add(this);
						this._EmployeeID = value.ID;
					}
					else
					{
						this._EmployeeID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employee")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Name;
		
		private string _Password;
		
		private bool _hasManagerRight;
		
		private bool _hasSuperRight;
		
		private EntitySet<SystemLog> _SystemLog;
		
		private EntitySet<OrderMaster> _OrderMaster;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnhasManagerRightChanging(bool value);
    partial void OnhasManagerRightChanged();
    partial void OnhasSuperRightChanging(bool value);
    partial void OnhasSuperRightChanged();
    #endregion
		
		public Employee()
		{
			this._SystemLog = new EntitySet<SystemLog>(new Action<SystemLog>(this.attach_SystemLog), new Action<SystemLog>(this.detach_SystemLog));
			this._OrderMaster = new EntitySet<OrderMaster>(new Action<OrderMaster>(this.attach_OrderMaster), new Action<OrderMaster>(this.detach_OrderMaster));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasManagerRight", DbType="Bit NOT NULL")]
		public bool hasManagerRight
		{
			get
			{
				return this._hasManagerRight;
			}
			set
			{
				if ((this._hasManagerRight != value))
				{
					this.OnhasManagerRightChanging(value);
					this.SendPropertyChanging();
					this._hasManagerRight = value;
					this.SendPropertyChanged("hasManagerRight");
					this.OnhasManagerRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_hasSuperRight", DbType="Bit NOT NULL")]
		public bool hasSuperRight
		{
			get
			{
				return this._hasSuperRight;
			}
			set
			{
				if ((this._hasSuperRight != value))
				{
					this.OnhasSuperRightChanging(value);
					this.SendPropertyChanging();
					this._hasSuperRight = value;
					this.SendPropertyChanged("hasSuperRight");
					this.OnhasSuperRightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_SystemLog", Storage="_SystemLog", ThisKey="ID", OtherKey="EmployeeID")]
		public EntitySet<SystemLog> SystemLog
		{
			get
			{
				return this._SystemLog;
			}
			set
			{
				this._SystemLog.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OrderMaster", Storage="_OrderMaster", ThisKey="ID", OtherKey="EmployeeID")]
		public EntitySet<OrderMaster> OrderMaster
		{
			get
			{
				return this._OrderMaster;
			}
			set
			{
				this._OrderMaster.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemLog(SystemLog entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_SystemLog(SystemLog entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
		
		private void attach_OrderMaster(OrderMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = this;
		}
		
		private void detach_OrderMaster(OrderMaster entity)
		{
			this.SendPropertyChanging();
			entity.Employee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _OrderMasterID;
		
		private string _BeverageName;
		
		private string _Sugar;
		
		private string _Ice;
		
		private int _Quantity;
		
		private EntityRef<Beverage> _Beverage;
		
		private EntityRef<OrderMaster> _OrderMaster;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderMasterIDChanging(int value);
    partial void OnOrderMasterIDChanged();
    partial void OnBeverageNameChanging(string value);
    partial void OnBeverageNameChanged();
    partial void OnSugarChanging(string value);
    partial void OnSugarChanged();
    partial void OnIceChanging(string value);
    partial void OnIceChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Beverage = default(EntityRef<Beverage>);
			this._OrderMaster = default(EntityRef<OrderMaster>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderMasterID", DbType="Int NOT NULL")]
		public int OrderMasterID
		{
			get
			{
				return this._OrderMasterID;
			}
			set
			{
				if ((this._OrderMasterID != value))
				{
					if (this._OrderMaster.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderMasterIDChanging(value);
					this.SendPropertyChanging();
					this._OrderMasterID = value;
					this.SendPropertyChanged("OrderMasterID");
					this.OnOrderMasterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeverageName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BeverageName
		{
			get
			{
				return this._BeverageName;
			}
			set
			{
				if ((this._BeverageName != value))
				{
					if (this._Beverage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBeverageNameChanging(value);
					this.SendPropertyChanging();
					this._BeverageName = value;
					this.SendPropertyChanged("BeverageName");
					this.OnBeverageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sugar", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Sugar
		{
			get
			{
				return this._Sugar;
			}
			set
			{
				if ((this._Sugar != value))
				{
					this.OnSugarChanging(value);
					this.SendPropertyChanging();
					this._Sugar = value;
					this.SendPropertyChanged("Sugar");
					this.OnSugarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ice", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ice
		{
			get
			{
				return this._Ice;
			}
			set
			{
				if ((this._Ice != value))
				{
					this.OnIceChanging(value);
					this.SendPropertyChanging();
					this._Ice = value;
					this.SendPropertyChanged("Ice");
					this.OnIceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Beverage_OrderDetail", Storage="_Beverage", ThisKey="BeverageName", OtherKey="Name", IsForeignKey=true)]
		public Beverage Beverage
		{
			get
			{
				return this._Beverage.Entity;
			}
			set
			{
				Beverage previousValue = this._Beverage.Entity;
				if (((previousValue != value) 
							|| (this._Beverage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Beverage.Entity = null;
						previousValue.OrderDetail.Remove(this);
					}
					this._Beverage.Entity = value;
					if ((value != null))
					{
						value.OrderDetail.Add(this);
						this._BeverageName = value.Name;
					}
					else
					{
						this._BeverageName = default(string);
					}
					this.SendPropertyChanged("Beverage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderMaster_OrderDetail", Storage="_OrderMaster", ThisKey="OrderMasterID", OtherKey="ID", IsForeignKey=true)]
		public OrderMaster OrderMaster
		{
			get
			{
				return this._OrderMaster.Entity;
			}
			set
			{
				OrderMaster previousValue = this._OrderMaster.Entity;
				if (((previousValue != value) 
							|| (this._OrderMaster.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderMaster.Entity = null;
						previousValue.OrderDetail.Remove(this);
					}
					this._OrderMaster.Entity = value;
					if ((value != null))
					{
						value.OrderDetail.Add(this);
						this._OrderMasterID = value.ID;
					}
					else
					{
						this._OrderMasterID = default(int);
					}
					this.SendPropertyChanged("OrderMaster");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderMaster")]
	public partial class OrderMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _EmployeeID;
		
		private int _Number;
		
		private System.DateTime _DateTime;
		
		private EntitySet<OrderDetail> _OrderDetail;
		
		private EntityRef<Employee> _Employee;
		
    #region 擴充性方法定義
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEmployeeIDChanging(string value);
    partial void OnEmployeeIDChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    #endregion
		
		public OrderMaster()
		{
			this._OrderDetail = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetail), new Action<OrderDetail>(this.detach_OrderDetail));
			this._Employee = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (this._Employee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderMaster_OrderDetail", Storage="_OrderDetail", ThisKey="ID", OtherKey="OrderMasterID")]
		public EntitySet<OrderDetail> OrderDetail
		{
			get
			{
				return this._OrderDetail;
			}
			set
			{
				this._OrderDetail.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_OrderMaster", Storage="_Employee", ThisKey="EmployeeID", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee
		{
			get
			{
				return this._Employee.Entity;
			}
			set
			{
				Employee previousValue = this._Employee.Entity;
				if (((previousValue != value) 
							|| (this._Employee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee.Entity = null;
						previousValue.OrderMaster.Remove(this);
					}
					this._Employee.Entity = value;
					if ((value != null))
					{
						value.OrderMaster.Add(this);
						this._EmployeeID = value.ID;
					}
					else
					{
						this._EmployeeID = default(string);
					}
					this.SendPropertyChanged("Employee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderMaster = this;
		}
		
		private void detach_OrderDetail(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderMaster = null;
		}
	}
}
#pragma warning restore 1591
